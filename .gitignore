Использовать для создания черновика


1. https://gb.ru/posts/soveti-pro-git 
2. Презентация


+ Работа с Git 
1. Проверка наличия установленного Git.
В терминале выполнить команду git version. Если Git установлена, 
появится сообщение с информацией о версии программы. Иначе будет сообщение об ошибке.

+ 2. Установка Git
Загружаем последнюю версию Git с сайта https://git-scm.com/downloads 
Устанавливаем с настройками по умолчанию.

+ 3. Настройка Git
При первом использовании Git необходимо представиться. 
Для этого нужно выполнить в терминале две команды: git config --global user.name «Ваше имя английскими буквами» 
git config --global user.email ваша почта@example.com

+ 4. Начало работы. Создание Репозитория.
Репозиторий в наших задачах — это папка, над которой были произведены некоторые действия, и Git 
в ней начинает выполнять свои задачи, например: 

     1. отслеживать изменения файлов; 

     2. хранить информацию о ветках.

"Важно! Репозиторий не возникает сам по себе, его нужно создать". 

Как понять, в репозитории мы находимся или в папке? 
набрать в терминале команду «git status». Если в ответ вы увидите ошибку «fatal: 
not a git repository (or any of the parent directories): .git», 
значит, в терминале вы вызываете команду не из репозитория, а из обычной папки.

"Важно! Репозиторий отслеживает изменения во всех вложенных в него папках".

Как создать репозиторий? Вызываем команду «git init», и эта папка становится репозиторием.


________________________________________________________________________________________________________________________________________________


+ 5. Основные команды Git _____________________________ ДОБАВИТЬ НОВЫЕ КОМАНДЫ, РАЗДЕЛИТЬ ИХ ПО ГРУППАМ И ОПИСАТЬ ОТДЕЛЬНО КАЖДУЮ

git init - инициализация локального репозитория;
git status - получить информацию от git о его текущем состоянии;
git add - добавить файл или файлы к следующему коммиту;
git commit -m - создание коммита;
git log - вывод на экран истории всех коммитов и их хеш-кодами;
git checkout - переход от одного коммита к другому или от одной ветки к другой;
git checkout master -  вернуться к актуальному состоянию и продолжить работу;
git diff -  увидеть разницу между текущим файлом и закоммиченным файлом;
git branch "name" - создать новую ветку;
git branch - показывает все имеющиеся ветки и отмечает ту, в которой вы находитесь;
git merge "name" - слияние веток;
git -d "name" - удаление ветки;
git log --graph - просмотр веток в виде картинки.


________________________________________________________________________________________________________________________________________________
НАПРИМЕР - 1. (4) ИНИЦИАЛИЗАЦИЯ РЕПОЗИТОРИЯ, (5) ЗАПИСЬ ИЗМЕНЕНИЙ В РЕПОЗИТОРИЙ, (6) ПРОСМОТР ИСТОРИИ КОММИТОВ, (7) ПЕРЕМЕЩЕНИЕ МЕЖДУ СОХРАНЕНИЯМИ, 
(8) ИГНОРИРОВАНИЕ ФАЙЛОВ, (9) СОЗДАНИЕ ВЕТОК В GIT, 
(10) СЛИЯНИЕ ВЕТОК И РАЗРЕШЕНИЕ КОНФЛИКТОВ (Описать какие варианты решение предлагает vs code и описать процесс слияния веток),
(11) Удаление веток. Возможные ошибки при удалении.


+ 6. Запись изменений в репозиторий

Для того чтобы сохранить данные, произведенные вами в репозитории, необходимо использовать команды git add, а затем git commit -m. Данные команды 
используется для сохранения ваших изменений.

"Важно! Необходимо использовать обе команды по порядку, иначе произведенные вами изменения не сохранятся". 



+ 7. Перемещение между сохранениями


Для того чтобы перемещаться между версиями вашей работы, сначала необходимо вывести в терминале все закоммиченые версии. В этом вам поможет команда git log.
Далее с помощью команды checkout + (хеш-код коммита) вы можете переместиться в нужный вам коммит. Если вы захотите вернуться в а актуальному состоянию 
и продолжить работу, введите команду checkout master.

"Важно! Если после команды git log вы более ничего не можете сделать, нажмите Q на английской раскладке чтобы снова вывести командную строку".



+ 8. Игнорирование файлов

Если вы решили в вашу работу добавить файлы формата jpg, png и т.п., то при вызове команды git status новые файлы (картинки) не будут отслеживаться.
Для решения этой проблемы нужно указать Git, что отслеживать их и не нужно. Чтобы это сделать, необходимо создать новый файл .gitignore в который поместить 
названия файлов которые не нужно отслеживать или же указать формат файлов отслеживать которые не нужно. Например:

1. *jpg
2. *png



+ 9. Создание веток в Git

Для того чтобы создать ветку в Git необходимо воспользоваться командой git branch "указать имя ветки". Если создать ветку с помощью этой команды не получается
посмотрите, может вы уже создали ветку с таким именем.


+ 10. Слияние веток в Git и разрешение конфликтов


Для того чтобы перенести данные из одной ветки в другую, необходимо находится в той ветке, в которую хочешь перенести данные из другой ветки и ввести команду 
git merge "указать папку из которой взять данные". Таким образом данные из указанной ветки перейдут в ветку в которой вы находитесь. 
Может произойти конфликт, когда в ветки в которой вы находитесь (master), уже находятся данные и вы собираетесь перенести на их место данные из 
другой ветки. Тогда vs code предложит вам несколько вариантов решения это конфликта:

1. оставить текущие данные;
2. текущие данные удалить и поместить новые;
3. оставить данные из обеих веток;
4. самостоятельно редактировать данные.


+ 11. Удаление веток


Чтобы удалить ветку можно использовать команду git -d "name" или git -delete "name".
"Важно! При удалении текущей ветки необходимо перейти в другую ветку с помощью команды git checkout "name", если вы этого не сделаете, то vs code
попросту не даст вам ветку в которой вы находитесь удалить.


+ 12. Синтаксис языка Markdown ____________________________________________ ОПИСАТЬ В КОНЦЕ и ПОДРОБНЕЕ

Основы синтаксиса:

# - выделение заколовков. Количество символов "#" задает уровень заголовка(поддерживается 6 уровней). Например "вот так";
= или -  - подчеркивание этими символами(не менее 3-х подряд) выделяет заголовки первого и второго уровней. Например "вот так";
** или __ - полужирное начертание. Например "вот так";
* или _ - курсивное начертание. Например "вот так";
*** - полужирное курсивное начертание. Например "вот так";
~~ - зачеркнутый текст. Например "вот так";
* строка - ненумерованные списки, символ "*" в начале строки. Например "вот так";
1,2,3... - нумерованные списки.Например "вот так".

Важно! Полный справочник по языку Markdown от Microsoft: https://docs.microsoft.com/ru-ru/contribute/markdown-reference


13. Добавление картинок

Чтобы добавить картинку нужно выполнить следующие: 

![название картинки](относительный путь картинки)
